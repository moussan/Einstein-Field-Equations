version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder # Use the builder stage for development
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend:/ap./src/frontend:cached
      - frontend_node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_SUPABASE_URL=${SUPABASE_URL}
      - REACT_APP_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - WATCHPACK_POLLING=true # Enable file watching in Windows/WSL
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - app_network

  # Optional: Add a local development database for testing without Supabase
  db:
    image: postgres:14-alpine
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=einstein_field_equations
    volumes:
      - postgres_data:/var/lib/postgresql/data:cached
      - ./supabase/migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - app_network

  # Optional: Database management tool
  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
    networks:
      - app_network

  # Optional: Redis for caching during development
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data:cached
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  app_network:
    driver: bridge
    name: einstein_network 
